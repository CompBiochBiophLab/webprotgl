attribute vec3 attrPosition;
attribute vec3 attrNormal;
attribute vec2 attrColour;

uniform mat4 cameraMatrix;
uniform mat4 worldMatrix;
uniform vec3 eye;
uniform mat3 inverseMatrix;
uniform float radius;
uniform float length;
uniform vec4 colourA;
uniform vec4 colourB;

varying vec3 normal;
varying vec4 col;
varying vec3 to_eye;

void main(void) {
  float new_z = attrPosition.z;
  if (new_z < 0.5) {
    col = colourA;
    new_z = new_z * 1.5;
  } else {
    col = colourB;
    new_z = new_z * 1.5 - 0.5;
  }
  vec3 scaled = vec3(attrPosition.xy * radius, new_z * length);
  vec4 intPos = worldMatrix * vec4(scaled, 1.);
  gl_Position = cameraMatrix * intPos;

  normal = normalize((worldMatrix * vec4(attrNormal.xyz, 0.)).xyz);
  to_eye = normalize(eye - intPos.xyz);
}

