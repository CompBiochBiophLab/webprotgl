attribute vec3 attrPosition;
attribute vec3 attrNormal;
attribute vec2 attrColour;

uniform mat4 cameraMatrix;
uniform mat4 worldMatrix;
uniform vec3 eye;
uniform mat3 inverseMatrix;
uniform float radius;
uniform vec4 colour;

varying vec3 normal;
varying vec4 col;
varying vec3 to_eye;

void main(void) {
  vec4 intPos = worldMatrix * vec4(attrPosition * radius, 1.);
  gl_Position = cameraMatrix * intPos;
//  gl_Position = cameraMatrix * worldMatrix * vec4(attrPosition * radius, 1.);
  normal = normalize((worldMatrix * vec4(attrNormal, 0.)).xyz);
  col = colour;

  to_eye = normalize(eye - intPos.xyz);
}

